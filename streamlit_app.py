"""
Aplicaci√≥n Principal - OpenCV 3.0 Computer Vision with Python Cookbook
Hub central para navegar entre todos los cap√≠tulos del libro
"""

import streamlit as st
import sys
import os
from pathlib import Path
import importlib.util
import subprocess

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="OpenCV 3.0 Cookbook - Hub Principal",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configurar el path para importar m√≥dulos
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# Informaci√≥n de los cap√≠tulos
CHAPTERS = {
    "Cap√≠tulo 1": {
        "title": "Operaciones B√°sicas con Im√°genes",
        "description": "Lectura, escritura, conversi√≥n y transformaciones afines de im√°genes",
        "icon": "üñºÔ∏è",
        "folder": "Chapter01",
        "features": ["Transformaciones Afines", "Rotaci√≥n y Escalado", "Traslaci√≥n", "Perspectiva"],
        "techniques": "Matrices de transformaci√≥n, interpolaci√≥n bilineal"
    },
    "Cap√≠tulo 2": {
        "title": "Mejoramiento y Filtrado de Im√°genes", 
        "description": "T√©cnicas de sharpening, filtros y mejoramiento de im√°genes",
        "icon": "‚ú®",
        "folder": "Chapter02", 
        "features": ["Filtro Unsharp Mask", "Filtros de Realce", "Kernels Personalizados"],
        "techniques": "Convoluci√≥n, kernels de sharpening, filtros pasa-altos"
    },
    "Cap√≠tulo 3": {
        "title": "Procesamiento Avanzado y Efectos Art√≠sticos",
        "description": "Cartoonizaci√≥n, filtros bilaterales y efectos creativos",
        "icon": "üé®", 
        "folder": "Chapter03",
        "features": ["Cartoonizaci√≥n", "Filtro Bilateral", "Efectos Art√≠sticos", "Detecci√≥n de Bordes"],
        "techniques": "Filtrado bilateral, clustering K-Means, edge detection"
    },
    "Cap√≠tulo 4": {
        "title": "Detecci√≥n de Caracter√≠sticas Faciales",
        "description": "Detecci√≥n de rostros, ojos, nariz y aplicaci√≥n de overlays",
        "icon": "üë§",
        "folder": "Chapter04",
        "features": ["Detecci√≥n Facial", "Detecci√≥n de Ojos", "Overlays", "Haar Cascades"],
        "techniques": "Haar Cascades, detecci√≥n multi-escala, ROI processing"
    },
    "Cap√≠tulo 5": {
        "title": "Detecci√≥n de Caracter√≠sticas Locales",
        "description": "SIFT, SURF, ORB, Harris corners y detecci√≥n de keypoints",
        "icon": "üîç",
        "folder": "Chapter05", 
        "features": ["Detector SIFT", "Detector SURF", "Detector ORB", "Harris Corners", "Good Features"],
        "techniques": "Descriptores locales, keypoints, feature matching"
    },
    "Cap√≠tulo 6": {
        "title": "Seam Carving y Redimensionado Inteligente",
        "description": "Algoritmos de seam carving para redimensionado content-aware",
        "icon": "‚úÇÔ∏è",
        "folder": "Chapter06",
        "features": ["Seam Carving", "Energy Functions", "Dynamic Programming", "Content-Aware Resize"],
        "techniques": "Programaci√≥n din√°mica, funciones de energ√≠a, seam removal"
    },
    "Cap√≠tulo 7": {
        "title": "Segmentaci√≥n Watershed",
        "description": "Algoritmo Watershed para segmentaci√≥n de im√°genes", 
        "icon": "üíß",
        "folder": "Chapter07",
        "features": ["Algoritmo Watershed", "Segmentaci√≥n", "Marcadores", "Morfolog√≠a"],
        "techniques": "Watershed, operaciones morfol√≥gicas, connected components"
    },
    "Cap√≠tulo 8": {
        "title": "Seguimiento y Detecci√≥n de Movimiento",
        "description": "Tracking por color, detecci√≥n de movimiento y an√°lisis temporal",
        "icon": "üéØ",
        "folder": "Chapter08",
        "features": ["Color Tracking", "Motion Detection", "Background Subtraction", "HSV Analysis"],
        "techniques": "Espacio HSV, sustracci√≥n de fondo, an√°lisis temporal"
    },
    "Cap√≠tulo 9": {
        "title": "Machine Learning y Bag of Words",
        "description": "Extracci√≥n de caracter√≠sticas, BoVW y clasificaci√≥n autom√°tica",
        "icon": "üß†",
        "folder": "Chapter09",
        "features": ["SIFT Features", "Bag of Visual Words", "K-Means Clustering", "SVM Classification"],
        "techniques": "BoVW, cuantizaci√≥n vectorial, machine learning"
    },
    "Cap√≠tulo 10": {
        "title": "Estimaci√≥n de Pose y Realidad Aumentada",
        "description": "Pose estimation, homograf√≠as y aplicaciones de AR",
        "icon": "üéØ", 
        "folder": "Chapter10",
        "features": ["Pose Estimation", "Homograf√≠a", "Realidad Aumentada", "Feature Matching"],
        "techniques": "Homograf√≠as, RANSAC, proyecci√≥n 3D, AR rendering"
    },
    "Cap√≠tulo 11": {
        "title": "Machine Learning Avanzado",
        "description": "Feature engineering avanzado y clasificaci√≥n multiclase",
        "icon": "üî¨",
        "folder": "Chapter11", 
        "features": ["Feature Engineering", "Multiclass Classification", "PCA Analysis", "Model Comparison"],
        "techniques": "Feature selection, PCA, m√∫ltiples clasificadores, evaluation"
    }
}

def load_chapter_app(chapter_folder):
    """Carga y ejecuta la aplicaci√≥n de un cap√≠tulo espec√≠fico"""
    try:
        # Path al archivo streamlit_app.py del cap√≠tulo
        chapter_path = current_dir / chapter_folder / "streamlit_app.py"
        
        if not chapter_path.exists():
            st.error(f"‚ùå No se encontr√≥ la aplicaci√≥n en {chapter_path}")
            return False
        
        # Cargar el m√≥dulo din√°micamente
        spec = importlib.util.spec_from_file_location("chapter_app", chapter_path)
        chapter_module = importlib.util.module_from_spec(spec)
        
        # A√±adir el directorio del cap√≠tulo al path para imports relativos
        chapter_dir = str(chapter_path.parent)
        if chapter_dir not in sys.path:
            sys.path.insert(0, chapter_dir)
        
        # Ejecutar el m√≥dulo
        spec.loader.exec_module(chapter_module)
        
        return True
        
    except ImportError as e:
        st.error(f"‚ùå Error de importaci√≥n en {chapter_folder}: {str(e)}")
        st.error("üí° El cap√≠tulo tiene dependencias faltantes, pero deber√≠a funcionar con fallbacks")
        
        # Informaci√≥n adicional para debugging
        st.error(f"üìç Archivo: {chapter_path}")
        st.error(f"üìç Error espec√≠fico: {type(e).__name__}")
        
        return False
        
    except Exception as e:
        st.error(f"‚ùå Error cargando la aplicaci√≥n del cap√≠tulo: {str(e)}")
        st.error("üí° Aseg√∫rate de que el archivo streamlit_app.py existe en la carpeta del cap√≠tulo")
        
        # Informaci√≥n adicional para debugging
        st.error(f"üìç Archivo: {chapter_path}")
        st.error(f"üìç Error espec√≠fico: {type(e).__name__}")
        
        return False

def show_chapter_overview(chapter_key, chapter_info):
    """Muestra la informaci√≥n general de un cap√≠tulo"""
    
    st.header(f"{chapter_info['icon']} {chapter_key}: {chapter_info['title']}")
    
    # Descripci√≥n
    st.markdown(f"**üìù Descripci√≥n:** {chapter_info['description']}")
    
    # Columnas para informaci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Caracter√≠sticas Principales")
        for feature in chapter_info['features']:
            st.write(f"‚Ä¢ {feature}")
    
    with col2:
        st.subheader("üîß T√©cnicas Implementadas") 
        st.write(chapter_info['techniques'])
    
    # Bot√≥n para ejecutar el cap√≠tulo
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button(f"üöÄ Ejecutar {chapter_key}", use_container_width=True, type="primary"):
            st.session_state.selected_chapter = chapter_key
            st.rerun()
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.info(f"üìÅ **Ubicaci√≥n:** `{chapter_info['folder']}/streamlit_app.py`")

def show_main_menu():
    """Muestra el men√∫ principal con todos los cap√≠tulos"""
    
    # Header principal
    st.title("üìö OpenCV 3.0 Computer Vision with Python Cookbook")
    st.markdown("### üéì Hub Interactivo de Aprendizaje")
    
    st.markdown("""
    Bienvenido al hub principal del **OpenCV 3.0 Computer Vision Cookbook**. 
    Esta aplicaci√≥n interactiva te permite explorar todos los cap√≠tulos del libro 
    a trav√©s de aplicaciones Streamlit dedicadas.
    """)
    
    # Estad√≠sticas generales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìñ Cap√≠tulos", len(CHAPTERS))
    
    with col2:
        total_features = sum(len(info['features']) for info in CHAPTERS.values())
        st.metric("üéØ Caracter√≠sticas", total_features)
    
    with col3:
        st.metric("üî¨ T√©cnicas CV", "50+")
    
    with col4:
        st.metric("üìä Aplicaciones", "11")
    
    st.markdown("---")
    
    # Selector de cap√≠tulo en sidebar
    st.sidebar.header("üß≠ Navegaci√≥n")
    
    # Opciones del selector
    chapter_options = ["üìã Men√∫ Principal"] + list(CHAPTERS.keys())
    
    selected_option = st.sidebar.selectbox(
        "Selecciona un cap√≠tulo:",
        options=chapter_options,
        index=0
    )
    
    # Informaci√≥n r√°pida en sidebar
    if selected_option != "üìã Men√∫ Principal":
        chapter_info = CHAPTERS[selected_option]
        st.sidebar.markdown("---")
        st.sidebar.markdown(f"**{chapter_info['icon']} {selected_option}**")
        st.sidebar.markdown(f"*{chapter_info['description']}*")
        
        if st.sidebar.button("üöÄ Ejecutar Cap√≠tulo", use_container_width=True):
            st.session_state.selected_chapter = selected_option
            st.rerun()
    
    # Mostrar cap√≠tulos en grid
    st.subheader("üìö Cap√≠tulos Disponibles")
    
    # Organizar en filas de 2 columnas
    chapters_list = list(CHAPTERS.items())
    
    for i in range(0, len(chapters_list), 2):
        col1, col2 = st.columns(2)
        
        # Primer cap√≠tulo de la fila
        with col1:
            if i < len(chapters_list):
                chapter_key, chapter_info = chapters_list[i]
                
                with st.container():
                    st.markdown(f"""
                    <div style="border: 2px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0;">
                        <h3>{chapter_info['icon']} {chapter_key}</h3>
                        <h4>{chapter_info['title']}</h4>
                        <p>{chapter_info['description']}</p>
                        <p><strong>T√©cnicas:</strong> {chapter_info['techniques']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    if st.button(f"Abrir {chapter_key}", key=f"btn_{i}", use_container_width=True):
                        st.session_state.selected_chapter = chapter_key
                        st.rerun()
        
        # Segundo cap√≠tulo de la fila
        with col2:
            if i + 1 < len(chapters_list):
                chapter_key, chapter_info = chapters_list[i + 1]
                
                with st.container():
                    st.markdown(f"""
                    <div style="border: 2px solid #e0e0e0; border-radius: 10px; padding: 20px; margin: 10px 0;">
                        <h3>{chapter_info['icon']} {chapter_key}</h3>
                        <h4>{chapter_info['title']}</h4>
                        <p>{chapter_info['description']}</p>
                        <p><strong>T√©cnicas:</strong> {chapter_info['techniques']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    if st.button(f"Abrir {chapter_key}", key=f"btn_{i+1}", use_container_width=True):
                        st.session_state.selected_chapter = chapter_key
                        st.rerun()
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Proyecto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üìñ Sobre el Libro:**
        - OpenCV 3.0 Computer Vision with Python Cookbook
        - 11 cap√≠tulos de t√©cnicas de visi√≥n por computador
        - Desde conceptos b√°sicos hasta ML avanzado
        - Implementaciones pr√°cticas con OpenCV y Python
        """)
    
    with col2:
        st.markdown("""
        **üõ†Ô∏è Tecnolog√≠as Utilizadas:**
        - **OpenCV**: Biblioteca principal de visi√≥n por computador
        - **Streamlit**: Framework para aplicaciones web interactivas
        - **NumPy**: Computaci√≥n num√©rica y manejo de arrays
        - **Matplotlib/Plotly**: Visualizaci√≥n de datos y resultados
        - **scikit-learn**: Algoritmos de machine learning
        """)
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center'>
            <p>üìö <strong>OpenCV 3.0 Computer Vision Cookbook</strong> - Hub Interactivo</p>
            <p><small>Explora t√©cnicas de visi√≥n por computador de forma interactiva</small></p>
        </div>
        """, 
        unsafe_allow_html=True
    )

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Inicializar estado de sesi√≥n
    if 'selected_chapter' not in st.session_state:
        st.session_state.selected_chapter = None
    
    # Verificar si se debe mostrar un cap√≠tulo espec√≠fico
    if st.session_state.selected_chapter and st.session_state.selected_chapter in CHAPTERS:
        
        chapter_key = st.session_state.selected_chapter
        chapter_info = CHAPTERS[chapter_key]
        
        # Header del cap√≠tulo
        st.sidebar.markdown("---")
        st.sidebar.markdown(f"### {chapter_info['icon']} {chapter_key}")
        st.sidebar.markdown(f"*{chapter_info['title']}*")
        
        # Bot√≥n para volver al men√∫ principal
        if st.sidebar.button("üè† Volver al Men√∫ Principal", use_container_width=True):
            st.session_state.selected_chapter = None
            st.rerun()
        
        st.sidebar.markdown("---")
        
        # Cargar y ejecutar la aplicaci√≥n del cap√≠tulo
        success = load_chapter_app(chapter_info['folder'])
        
        if not success:
            st.error("‚ùå No se pudo cargar la aplicaci√≥n del cap√≠tulo")
            if st.button("üè† Volver al Men√∫ Principal"):
                st.session_state.selected_chapter = None
                st.rerun()
    
    else:
        # Mostrar men√∫ principal
        show_main_menu()

if __name__ == "__main__":
    main()